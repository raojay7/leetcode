
In fact, we can mark off multiples of 5 starting at 5 × 5 = 25, 
because 5 × 2 = 10 was already marked off by multiple of 2, 
similarly 5 × 3 = 15 was already marked off by multiple of 3. 
Therefore, if the current number is p, we can always mark off multiples of p starting at p2, 
then in increments of p: p2 + p, p2 + 2p, ... Now what should be the terminating loop condition?

public int countPrimes(int n) {
   boolean[] isPrime = new boolean[n];
   for (int i = 2; i < n; i++) {
      isPrime[i] = true;
   }
   // Loop's ending condition is i * i < n instead of i < sqrt(n)
   // to avoid repeatedly calling an expensive function sqrt().
   for (int i = 2; i * i < n; i++) {
      if (!isPrime[i]) continue;
      for (int j = i * i; j < n; j += i) {
         isPrime[j] = false;
      }
   }
   int count = 0;
   for (int i = 2; i < n; i++) {
      if (isPrime[i]) count++;
   }
   return count;
}
