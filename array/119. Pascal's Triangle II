import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

//基础水题
class Solution {
    public List<Integer> getRow(int rowIndex) {
        List<List<Integer>> res=new ArrayList<>();
        for (int i = 0; i <= rowIndex; i++) {
            //设置第一个和最后一个
            List<Integer> list= Arrays.asList(new Integer[i+1]);
            list.set(0,1);
            list.set(i,1);
            for (int j = 1; j < i; j++) {
                list.set(j,res.get(i-1).get(j-1)+res.get(i-1).get(j));
            }
            res.add(list);
        }

        return res.get(rowIndex);
    }
}

可以优化空间
这里依旧使用杨辉三角的规律，很隐藏的规律：对于杨辉三角的同一行，第 ( i + 1) 项是第 i 项的 ( k - i ) /( i + 1 ) 倍。

比如：

第 k 索引行的第 0 项：1
第 k 索引行的第 1 项：1 * k
第 k 索引行的第 2 项：1 * k * ( k - 1) / 2
第 k 索引行的第 3 项：[1 * k * ( k - 1) / 2 ] * ( k - 2 ) / 3

class Solution {
  public List<Integer> getRow(int rowIndex) {
        List<Integer> res = new ArrayList<>(rowIndex + 1);
        long index = 1;
        for (int i = 0; i <= rowIndex; i++) {
            res.add((int) index);
            index = index * ( rowIndex - i ) / ( i + 1 );
        }
        return res; 
  }
}

