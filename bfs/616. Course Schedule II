import java.util.*;

public class Solution {



    public int[] findOrder(int numCourses, int[][] prerequisites) {
        //增加了保存顺序
        int[] res=new int[numCourses];

        if (prerequisites == null || prerequisites.length == 0){
            for (int i = 0; i < numCourses; i++) {
                res[i]=i;
            }
            return res;
        }

        List<Integer>[] edges = new ArrayList[numCourses];
        int[] indegree = new int[numCourses];

        for (int i = 0; i < numCourses; i++) {
            edges[i] = new ArrayList();
            indegree[i] = 0;
        }

        for (int i = 0; i < prerequisites.length; i++) {
            edges[prerequisites[i][1]].add(prerequisites[i][0]);
            indegree[prerequisites[i][0]]++;
        }

        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0) {
                queue.offer(i);
            }
        }

        int nTotal = 0;
        while (!queue.isEmpty()) {
            Integer head = queue.poll();
            res[nTotal]=head;
            for (Integer neig : edges[head]) {
                indegree[neig]--;
                if (indegree[neig] == 0) {
                    queue.offer(neig);
                }
            }
            nTotal++;
        }
        if (nTotal!=numCourses)return new int[0];
        return res;
    }
}
