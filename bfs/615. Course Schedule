import java.util.*;

public class Solution {
    /*
     * @param numCourses: a total of n courses
     * @param prerequisites: a list of prerequisite pairs
     * @return: true if can finish all courses or false
     */
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        // write your code here
        if (prerequisites==null||prerequisites.length==0)return true;
        //构造有向图对其进行拓扑排序
        //得到对应的图，以及其邻居

        List<Integer>[] edges=new ArrayList[numCourses];
        int[] indegree=new int[numCourses];

        //初始化
        for (int i = 0; i < numCourses; i++) {
            edges[i]=new ArrayList();
            indegree[i]=0;
        }

        //构造边和入度
        for (int i = 0; i < prerequisites.length; i++) {
            edges[prerequisites[i][1]].add(prerequisites[i][0]);
            indegree[prerequisites[i][0]]++;
        }

        //使用bfs
        Queue<Integer> queue=new LinkedList<>();
        //把所有度为0的结点入队列
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i]==0){
                queue.offer(i);
            }
        }

        int nTotal = 0;
        while(!queue.isEmpty()){
            Integer head=queue.poll();

            for (Integer neig:edges[head]){
                indegree[neig]--;
                if(indegree[neig]==0){
                    queue.offer(neig);
                }
            }
            nTotal++;
        }
        return nTotal==numCourses;
    }
}
