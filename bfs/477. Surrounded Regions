import java.util.LinkedList;
import java.util.Queue;

public class Solution {
    class Pair{
        int x,y;
        public Pair(int x,int y){
            this.x=x;
            this.y=y;
        }
    }
    /*
     * @param board: board a 2D board containing 'X' and 'O'
     * @return: nothing
     */
    public void surroundedRegions(char[][] board) {
        // write your code here
        if(board==null||board.length==0)return;
        //bfs遍历
        //直接从四周遍历，将所有结点设置为P，然后没有遍历到的就设置为X
        int row=board.length;
        int col=board[0].length;
        for (int i = 0; i < row; i++) {
            bfs(board, i, 0);
            bfs(board, i, col - 1);
        }

        for (int j = 1; j < col - 1; j++) {
            bfs(board, 0, j);
            bfs(board, row - 1, j);
        }
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                switch (board[i][j]){
                    case 'O':
                        board[i][j]='X';
                        break;
                    case 'P':
                        board[i][j]='O';
                }
            }
        }
    }

    private void bfs(char[][] board,int x,int y) {

        //从边界的O开始遍历
        if (board[x][y] != 'O') {
            return;
        }
        //方向数组左右上下
        int[] dx={-1,1,0,0};
        int[] dy={0,0,-1,1};
        Queue<Pair> queue=new LinkedList<>();
        queue.offer(new Pair(x,y));

        while(!queue.isEmpty()){
            Pair pair = queue.poll();
            if(board[pair.x][pair.y]=='P')continue;//遍历过的不再访问
            board[pair.x][pair.y]='P';
            for (int i = 0; i < 4; i++) {
                int newx=pair.x+dx[i];
                int newy=pair.y+dy[i];
                //边界检查
                if(newx<0||newy<0||newx>board.length-1||newy>board[0].length-1)continue;
                if(board[newx][newy]=='O') {
                    queue.offer(new Pair(newx,newy));
                }
            }
        }
    }

}
