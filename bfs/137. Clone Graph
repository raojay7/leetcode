import java.util.*;

class UndirectedGraphNode {
    int label;
    ArrayList<UndirectedGraphNode> neighbors;
    UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
};



public class Solution {
    /*
     * @param node: A undirected graph node
     * @return: A undirected graph node
     */
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        // write your code here
        if (node==null)return node;
        //1.bfs得到所有的图结点
        List<UndirectedGraphNode> nodes=getNodes(node);
        //2.将结点拷贝到map映射
        HashMap<UndirectedGraphNode,UndirectedGraphNode> map=new HashMap<>();
        for (UndirectedGraphNode n:nodes){
            map.put(n,new UndirectedGraphNode(n.label));
        }
        //3.将边进行拷贝
        for(UndirectedGraphNode n:nodes){
            UndirectedGraphNode newNode=map.get(n);
            for(UndirectedGraphNode neighbor:n.neighbors){
                newNode.neighbors.add(map.get(neighbor));
            }
        }
        return map.get(node);
    }

    private List<UndirectedGraphNode> getNodes(UndirectedGraphNode node) {
        Queue<UndirectedGraphNode> queue=new LinkedList<>();
        HashSet<UndirectedGraphNode> set=new HashSet<>();
        queue.offer(node);
        set.add(node);
        while (!queue.isEmpty()){
            UndirectedGraphNode head=queue.poll();
            for (UndirectedGraphNode neighbor:head.neighbors){
                if(set.contains(neighbor))continue;
                set.add(neighbor);
                queue.offer(neighbor);
            }
        }
        return new ArrayList<>(set);
    }
}
