import java.util.*;

class DirectedGraphNode {
    int label;
    ArrayList<DirectedGraphNode> neighbors;
    DirectedGraphNode(int x) { label = x; neighbors = new ArrayList<DirectedGraphNode>(); }
};


public class Solution {
    /*
     * @param graph: A list of Directed graph node
     * @return: Any topological order for the given graph.
     */
    public ArrayList<DirectedGraphNode> topSort(ArrayList<DirectedGraphNode> graph) {
        // write your code here
        //1.把有向图的邻居结点全部加入，即得到了入度不为0的结点map
        ArrayList<DirectedGraphNode> res=new ArrayList<>();
        Queue<DirectedGraphNode> queue=new LinkedList<>();
        HashMap<DirectedGraphNode,Integer> map=new HashMap<>();
        for(DirectedGraphNode node:graph){
            for (DirectedGraphNode neighbor:node.neighbors){
                if (map.containsKey(neighbor)){
                    map.put(neighbor,map.get(neighbor)+1);
                }else{
                    map.put(neighbor,1);
                }
            }
        }
        //2.把所有入度为0的结点入队列和结果集
        for (DirectedGraphNode node:graph){
            if (!map.containsKey(node)){
                res.add(node);
                queue.offer(node);
            }
        }
        //3.bfs遍历，遍历到一次结点，对应结点的入度减一，当该结点的入度为0时，加入队列和结果集中
        while (!queue.isEmpty()){
            DirectedGraphNode node=queue.poll();
            for (DirectedGraphNode neighbor:node.neighbors){
                map.put(neighbor,map.get(neighbor)-1);
                if (map.get(neighbor)==0){
                    queue.offer(neighbor);
                    res.add(neighbor);
                }
            }
        }
        return res;
    }
}
