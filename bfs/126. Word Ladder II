
import java.util.*;

class Solution {
    /*
    我们的目的是找出所有的路径，我们建立一个路径集paths，用以保存所有路径，
    然后是起始路径p，在p中先把起始单词放进去。然后定义两个整型变量level，
    和minLevel，其中level是记录循环中当前路径的长度，minLevel是记录最短路径的长度，
    这样的好处是，如果某条路径的长度超过了已有的最短路径的长度，
    那么舍弃，这样会提高运行速度，相当于一种剪枝。
    还要定义一个set变量words，用来记录已经循环过的路径中的词，然后就是BFS的核心了，
    循环路径集paths里的内容，取出队首路径，如果该路径长度大于level，
    说明字典中的有些词已经存入路径了，如果在路径中重复出现，则肯定不是最短路径，
    所以我们需要在字典中将这些词删去，然后将words清空，对循环对剪枝处理。
    然后我们取出当前路径的最后一个词，对每个字母进行替换并在字典中查找是否存在替换后的新词，
    这个过程在之前那道 Word Ladder 里面也有。如果替换后的新词在字典中存在，将其加入words中，
    并在原有路径的基础上加上这个新词生成一条新路径，如果这个新词就是结束词，
    则此新路径为一条完整的路径，加入结果中，并更新minLevel，
    若不是结束词，解将新路径加入路径集中继续循环。
     */
    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
        List<List<String>> res=new ArrayList<>();
        Set<String> words=new HashSet<>();
        Set<String> dict=new HashSet<>(wordList);
        int level=1,minlevel=Integer.MAX_VALUE;
        Queue<List<String>> queue=new LinkedList<>();
        List<String> path=new ArrayList<>();
        path.add(beginWord);
        queue.offer(path);
        while(!queue.isEmpty()){
            List<String> t = queue.poll();
            //更新level，并清除已经使用的words，并把另外一条路径的words不干扰
            if(t.size()>level){
                for(String word:words)dict.remove(word);
                words.clear();
                level=t.size();
                if(level>minlevel)break;//终止当前搜索
            }
            //开始正常的bfs
            String last = t.get(t.size() - 1);
            for (int i = 0; i < last.length(); i++) {
                char[] chars = last.toCharArray();
                for (char ch = 'a'; ch <= 'z'; ++ch) {
                    chars[i]=ch;
                    String newlast=String.valueOf(chars);
                    if(!dict.contains(newlast))continue;
                    words.add(newlast);
                    List<String> newpath=new ArrayList<>(t);
                    newpath.add(newlast);
                    if(newlast.equals(endWord)){
                        res.add(newpath);
                        minlevel=level;
                    }else{
                        queue.add(newpath);
                    }
                }
            }
        }
        return res;
    }
}
