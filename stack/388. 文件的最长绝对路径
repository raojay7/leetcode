import java.util.HashMap;
import java.util.Map;

class Solution {
    /*
    取得绝对路径最大深度
    就是获取最长的深度与文件名的长度的和
    将字符串按\n分开，然后遍历每个串，比较最值
    使用map记录深度的最值
    最长绝对文件路径不一定是要最深的路径，我们可以用 HashMap 来建立深度和当前深度的绝对路径长度之间的映射，
    那么当前深度下的文件的绝对路径就是文件名长度加上 HashMap 中当前深度对应的长度，
    我们的思路是遍历整个字符串，遇到 \n 或者 \t 就停下来，然后我们判断，
    如果遇到的是回车，我们把这段文件名提取出来，如果里面包含 '.'，说明是文件，
    我们更新 res 长度，如果不包含点，说明是文件夹，我们深度 level 自增1，
    然后建立当前深度和总长度之间的映射，然后我们将深度 level 重置为0。
    之前如果遇到的是空格 \t，那么我们深度加一，通过累加 \t 的个数，
    我们可以得知当前文件或文件夹的深度，然后做对应的处理
     */
    public int lengthLongestPath(String input) {
        int res=0;
        Map<Integer,Integer> map=new HashMap<>();
        map.put(0,0);
        for(String s:input.split("\n")){
            int level=s.lastIndexOf("\t")+1;
            int len=s.substring(level).length();
            if(s.contains(".")){
                res= Math.max(res, map.get(level)+len);
            }else{
                map.put(level+1, map.get(level)+len+1);//把文件夹的长度更新
            }
        }
        return res;
    }
}
