import java.util.LinkedList;
import java.util.Queue;

class MyStack {

    Queue<Integer> q=new LinkedList<>();
    Queue<Integer> tmp=new LinkedList<>();
    /** Initialize your data structure here. */
    public MyStack() {

    }

    /** Push element x onto stack. */
    public void push(int x) {
        q.offer(x);
    }

    /** Removes the element on top of the stack and returns that element. */
    public int pop() {
        int t=-1;
        while(!q.isEmpty()){
            t=q.poll();
            if(q.isEmpty()){
                break;//表明最后一个，将这个值输出
            }
            tmp.offer(t);
        }
        //倒回去
        while (!tmp.isEmpty()){
            q.offer(tmp.poll());
        }
        return t;
    }

    /** Get the top element. */
    public int top() {
        int t=-1;
        while(!q.isEmpty()){
            t=q.poll();
            tmp.offer(t);
        }
        //倒回去
        while (!tmp.isEmpty()){
            q.offer(tmp.poll());
        }
        return t;
    }

    /** Returns whether the stack is empty. */
    public boolean empty() {
        return q.isEmpty();
    }
}

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * boolean param_4 = obj.empty();
 */
