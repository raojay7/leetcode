import java.util.*;

class Solution {

    Map<Integer,Integer> map=new HashMap<>();
    //思路就是用一个map去重并计数
    public List<List<Integer>> combinationSum2(int[] nums, int target) {
        List<List<Integer>> res=new ArrayList<>();
        Arrays.sort(nums);
        for (int i = 0; i < nums.length; i++) {
            if(map.containsKey(nums[i])){
                map.put(nums[i],map.get(nums[i])+1);
            }else{
                map.put(nums[i],1);
            }
        }
        helper(new ArrayList<>(),res,nums,0,target);
        return res;
    }


    public void helper(List<Integer> list,List<List<Integer>> res,int[] nums,int begin,int target){
        if(target<0){
            return;
        }
        if(target==0){
            res.add(new ArrayList<>(list));
            return;
        }
        for (int i = begin; i < nums.length; i++) {
            if(i==nums.length-1||(i+1<nums.length&&nums[i]!=nums[i+1])){
                //去除重复，开始递归
                for (int j = 0; j < map.get(nums[i]); j++) {
                    for (int k = 0; k <= j; k++) {
                        list.add(nums[i]);
                    }
                    helper(list,res,nums,i+1,target-(j+1)*nums[i]);
                    for (int k = 0; k <= j; k++) {
                        list.remove(list.size() - 1);
                    }
                }
            }
        }
    }

}

//之前想复杂了，可以直接去重


import java.util.*;

class Solution {


    public List<List<Integer>> combinationSum2(int[] nums, int target) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        helper(new ArrayList<>(), res, nums, 0, target);
        return res;
    }


    public void helper(List<Integer> list, List<List<Integer>> res, int[] nums, int begin, int target) {
        if (target < 0) {
            return;
        }
        if (target == 0) {
            res.add(new ArrayList<>(list));
            return;
        }
        for (int i = begin; i < nums.length; i++) {
            if (i > begin && nums[i] == nums[i - 1]) continue;
            //去除重复，开始递归
            list.add(nums[i]);
            helper(list, res, nums, i + 1, target - nums[i]);
            list.remove(list.size() - 1);
        }
    }
}
