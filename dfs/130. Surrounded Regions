class Solution {
    int dx[] = {1, -1, 0, 0};
    int dy[] = {0, 0, 1, -1};

    public void solve(char[][] board) {
        if (board == null || board.length < 2 || board[0].length < 2) return;
        int m = board.length;
        int n = board[0].length;
        boolean[][] visited = new boolean[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 || j == 0 || i == m - 1 || j == n - 1) {
                    if (!visited[i][j] && board[i][j] == 'O') {
                        helper(i, j, board, visited);
                    }
                }
            }
        }


        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (!visited[i][j] && board[i][j] == 'O') {
                    board[i][j]='X';
                }
            }
        }
    }

    public void helper(int i, int j, char[][] board, boolean[][] visited) {
        visited[i][j] = true;
        for (int k = 0; k < 4; k++) {
            int nx = i + dx[k];
            int ny = j + dy[k];
            if (isSafe(nx, ny, board) && !visited[nx][ny] && board[nx][ny] == 'O') {
                helper(nx, ny, board, visited);
            }
        }
    }


    public boolean isSafe(int i, int j, char[][] board) {
        if (i < 0 || j < 0 || i >= board.length || j >= board[0].length) return false;
        return true;
    }
}
