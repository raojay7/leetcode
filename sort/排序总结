https://mp.weixin.qq.com/s/vn3KiV-ez79FmbZ36SX9lg

// 1.冒泡排序
public class BubbleSort implements IArraySort {

    @Override
    public int[] sort(int[] sourceArray) throws Exception {
        // 对 arr 进行拷贝，不改变参数内容
        int[] arr = Arrays.copyOf(sourceArray, sourceArray.length);

        for (int i = 1; i < arr.length; i++) {
            // 设定一个标记，若为true，则表示此次循环没有进行交换，也就是待排序列已经有序，排序已经完成。
            boolean flag = true;

            for (int j = 0; j < arr.length - i; j++) {
                if (arr[j] > arr[j + 1]) {
                    int tmp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = tmp;

                    flag = false;
                }
            }

            if (flag) {
                break;
            }
        }
        return arr;
    }
}
//1.1交换排序
public static void swapSort(int[] array){
   for(int i=0; i<array.length-1; i++){
   for(int j=i+1; j<array.length; j++){
      if(array[i]>array[j]){
        int temp=array[i];
        array[i]=array[j];
        array[j]=temp;
      }
   }
   }
}
//2.选择排序
public class SelectionSort implements IArraySort {

    @Override
    public int[] sort(int[] sourceArray) throws Exception {
        int[] arr = Arrays.copyOf(sourceArray, sourceArray.length);

        // 总共要经过 N-1 轮比较
        for (int i = 0; i < arr.length - 1; i++) {
            int min = i;

            // 每轮需要比较的次数 N-i
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[j] < arr[min]) {
                    // 记录目前能找到的最小值元素的下标
                    min = j;
                }
            }

            // 将找到的最小值和i位置所在的值进行交换
            if (i != min) {
                int tmp = arr[i];
                arr[i] = arr[min];
                arr[min] = tmp;
            }

        }
        return arr;
    }
}



//3.插入排序
public class InsertSort implements IArraySort {

    @Override
    public int[] sort(int[] sourceArray) throws Exception {
        // 对 arr 进行拷贝，不改变参数内容
        int[] arr = Arrays.copyOf(sourceArray, sourceArray.length);

        // 从下标为1的元素开始选择合适的位置插入，因为下标为0的只有一个元素，默认是有序的
        for (int i = 1; i < arr.length; i++) {

            // 记录要插入的数据
            int tmp = arr[i];

            // 从已经排序的序列最右边的开始比较，找到比其小的数
            int j = i;
            while (j > 0 && tmp < arr[j - 1]) {
                arr[j] = arr[j - 1];
                j--;
            }

            // 存在比其小的数，插入
            if (j != i) {
                arr[j] = tmp;
            }

        }
        return arr;
    }
}

//4.希尔排序，就是插入排序的变种
public class ShellSort implements IArraySort {

    @Override
    public int[] sort(int[] sourceArray) throws Exception {
        // 对 arr 进行拷贝，不改变参数内容
        int[] arr = Arrays.copyOf(sourceArray, sourceArray.length);

        int gap = 1;
        while (gap < arr.length) {
            gap = gap * 3 + 1;
        }

        while (gap > 0) {
            for (int i = gap; i < arr.length; i++) {
                int tmp = arr[i];
                int j = i - gap;
                while (j >= 0 && arr[j] > tmp) {
                    arr[j + gap] = arr[j];
                    j -= gap;
                }
                arr[j + gap] = tmp;
            }
            gap = (int) Math.floor(gap / 3);
        }

        return arr;
    }
}

//5.归并排序
import java.util.Arrays;

class Solution {
    public static int[] merge(int []left,int []right){
        int[] res=new int[left.length+right.length];
        int i=0;
        while(left.length>0&&right.length>0){
            if(left[0]<right[0]){
                res[i++]=left[0];
                left=Arrays.copyOfRange(left,1,left.length);

            }else{
                res[i++]=right[0];
                right=Arrays.copyOfRange(right,1,right.length);
            }
        }
        while(left.length>0){
            res[i++]=left[0];
            left=Arrays.copyOfRange(left,1,left.length);
        }
        while (right.length>0){
            res[i++]=right[0];
            right=Arrays.copyOfRange(right,1,right.length);
        }
        return res;
    }
    public static int[] sort(int[] sourceArray){
        int []arr= Arrays.copyOf(sourceArray,sourceArray.length);
        if(arr.length<2)return arr;//important
        int mid=(int)Math.floor(arr.length/2);
        int []left=Arrays.copyOfRange(arr,0,mid);
        int []right=Arrays.copyOfRange(arr,mid,arr.length);

        return merge(sort(left),sort(right));
    }

    public static void main(String[] args) {
        int []a={98,65,66,71,75,60,41,2,90,37};
        System.out.println(Arrays.toString(sort(a)));
    }
}
