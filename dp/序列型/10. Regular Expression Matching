class Solution {
    /*
    我们还可以用dp来解决这道题，因为题目具备最优子结构
    可以使用f[i][j]来表示s的前i个字符与p的前j个字符是否匹配，
    可以写出如下的转移方程:
    1.  P[i][j] = P[i - 1][j - 1], if p[j - 1] != '*' && (s[i - 1] == p[j - 1] || p[j - 1] == '.');
    2.  P[i][j] = P[i][j - 2], if p[j - 1] == '*' and the pattern repeats for 0 times;
    3.  P[i][j] = P[i - 1][j] && (s[i - 1] == p[j - 2] || p[j - 2] == '.'), if p[j - 1] == '*' and the pattern repeats for at least 1 times.
     */
    public boolean isMatch(String s, String p) {
        int m = s.length(), n = p.length();
        boolean f[][] = new boolean[m + 1][n + 1];
        f[0][0] = true;
        for (int i = 0; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (j > 1 && p.charAt(j - 1) == '*') {
                    f[i][j] = f[i][j - 2] || (i > 0 && (s.charAt(i - 1) == p.charAt(j - 2) || p.charAt(j - 2)== '.') && f[i - 1][j]);
                } else {
                    f[i][j] = i > 0 && f[i - 1][j - 1] && (s.charAt(i - 1) == p.charAt(j - 1) || p.charAt(j - 1) == '.');
                }
            }
        }
        return f[m][n];
    }
}
