class Solution {
    //dp采用滚动数组，先判断最大的和sum是否小于S，如果是直接减枝return 0
    //滚动数组，g[i+num]+=f[i],g[i-num]+=f[i]，然后将f=g,i的范围是从num到i+num<max
//    public int findTargetSumWays(int[] nums, int S) {
//        int sum=0;
//        for (int num:nums) {
//            sum+=num;
//        }
//        if(sum<S)return 0;
//        int max=sum*2+1;
//        int f[]=new int[max];
//        //初始化
//        f[sum]=1;
//        for(int num:nums){
//            int g[]=new int[max];
//            for (int i = num; i +num < max; i++) {
//                g[i+num]+=f[i];
//                g[i-num]+=f[i];
//            }
//            f=g;
//        }
//        return f[sum+S];
//    }

    /*
     举例说明: nums = {1,2,3,4,5}, target=3, 一种可行的方案是+1-2+3-4+5 = 3

     该方案中数组元素可以分为两组，一组是数字符号为正(P={1,3,5})，另一组数字符号为负(N={2,4})

     因此: sum(1,3,5) - sum(2,4) = target

              sum(1,3,5) - sum(2,4) + sum(1,3,5) + sum(2,4) = target + sum(1,3,5) + sum(2,4)

              2sum(1,3,5) = target + sum(1,3,5) + sum(2,4)

              2sum(P) = target + sum(nums)

              sum(P) = (target + sum(nums)) / 2

    */
    //转化为0-1背包问题，s(p)=(s+sum)/2
    public int findTargetSumWays(int[] nums, int S) {
        int sum=0;
        for (int num:nums){
            sum+=num;
        }
        if(sum<S||(S+sum)%2!=0)return 0;
        int target=(S+sum)/2;
        int[] f=new int[target+1];
        f[0]=1;
        for(int num:nums){
            for(int j=target;j>=num;j--){
                f[j]+=f[j-num];
            }
        }

        return f[target];
    }
}
