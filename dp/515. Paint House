public class Solution {
    /**
    序列型动态规划
     * @param costs: n x 3 cost matrix
     * @return: An integer, the minimum cost to paint all houses
     */
    public int minCost(int[][] costs) {
        // write your code here
        int n=costs.length;
        if (n==0)return 0;
        int i,j,k;
        int[][] dp=new int[n+1][3];
        dp[0][0]=dp[0][1]=dp[0][2]=0;
        for (i=1;i<=n;i++){
            for (j=0;j<3;j++){
                dp[i][j]=Integer.MAX_VALUE;//为了便于区分颜色不能相邻
                for (k=0;k<3;k++){
                    if(k!=j&&dp[i-1][k]+costs[i-1][j]<dp[i][j]){
                        dp[i][j]=dp[i-1][k]+costs[i-1][j];
                    }
                }
            }
        }
        int res=dp[n][0];
        res=Math.min(res,dp[n][1]);
        res=Math.min(res,dp[n][2]);
        return res;
    }
}
