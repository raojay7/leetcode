public class Solution {
    /**
     * @param grid: Given a 2D grid, each cell is either 'W', 'E' or '0'
     * @return: an integer, the maximum enemies you can kill using one bomb
     */
    public int maxKilledEnemies(char[][] grid) {
        // write your code here
        if (grid==null||grid.length==0||grid[0].length==0)return 0;
        int m=grid.length;
        int n=grid[0].length;
        //用于记录上下左右的敌人数（或）
        int[][]f=new int[m][n];
        int i,j;
        //记录和
        int[][] res=new int[m][n];//多少敌人可以被杀死
        //上
        for (i=0;i<m;++i){
            for (j=0;j<n;++j){
                if (grid[i][j]=='W'){
                    f[i][j]=0;
                }else{
                    f[i][j]=0;//由于f要重复使用，所以要设置其为0
                    if (grid[i][j]=='E'){
                        f[i][j]=1;
                    }//如果有上一行，把上一行的值加过来
                    if (i-1>=0){
                        f[i][j]+=f[i-1][j];
                    }
                }
                res[i][j]+=f[i][j];
            }
        }

        //下（要从最下往上迭代）
        for (i=m-1;i>=0;--i){
            for (j=0;j<n;++j){
                if (grid[i][j]=='W'){
                    f[i][j]=0;
                }else{
                    f[i][j]=0;
                    if (grid[i][j]=='E'){
                        f[i][j]=1;
                    }//如果有上一行，把上一行的值加过来
                    if (i+1<m){
                        f[i][j]+=f[i+1][j];
                    }
                }
                res[i][j]+=f[i][j];
            }
        }
        //左
        for (i=0;i<m;++i){
            for (j=0;j<n;++j){
                if (grid[i][j]=='W'){
                    f[i][j]=0;
                }else{
                    f[i][j]=0;

                    if (grid[i][j]=='E'){
                        f[i][j]=1;
                    }//如果有上一行，把上一行的值加过来
                    if (j-1>=0){
                        f[i][j]+=f[i][j-1];
                    }
                }
                res[i][j]+=f[i][j];
            }
        }
        //右
        for (i=0;i<m;++i){
            for (j=n-1;j>=0;--j){
                if (grid[i][j]=='W'){
                    f[i][j]=0;
                }else{
                    f[i][j]=0;

                    if (grid[i][j]=='E'){
                        f[i][j]=1;
                    }//如果有上一行，把上一行的值加过来
                    if (j+1<n){
                        f[i][j]+=f[i][j+1];
                    }
                }
                res[i][j]+=f[i][j];
            }
        }
        int result=0;
        for (i=0;i<m;++i){
            for (j=0;j<n;++j){
                if (grid[i][j]=='0'&&res[i][j]>result){
                    result=res[i][j];
                }
            }
        }

        return result;
    }
}
