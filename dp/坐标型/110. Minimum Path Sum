public class Solution {
    /**
     * @param grid: a list of lists of integers
     * @return: An integer, minimizes the sum of all numbers along its path
     */
    public int minPathSum(int[][] grid) {
        // 初始判断
        if (grid==null||grid.length==0||grid[0].length==0)return 0;
        int m=grid.length;
        int n=grid[0].length;
        int[][] f=new int[2][n];
        int old,now=0;
        int i,j,t1,t2;
        for (i=0;i<m;++i){
            old=now;
            now=1-now;
            for (j=0;j<n;++j){
                //边界条件
                if (i==0&&j==0){
                    f[now][j]=grid[i][j];
                    continue;
                }
                f[now][j]=grid[i][j];
                //用于判断加左边的一个格子还是上面的一个格子
                if (i>0){
                    t1=f[old][j];
                }else{
                    t1=Integer.MAX_VALUE;
                }
                if (j>0){
                    t2=f[now][j-1];
                }
                else {
                    t2=Integer.MAX_VALUE;
                }
                //转移方程
                if (t1<t2){
                    f[now][j]=t1+grid[i][j];
                }else {
                    f[now][j]=t2+grid[i][j];
                }
            }
        }
        return f[now][n-1];
    }
}
